// automatically generated by the FlatBuffers compiler, do not modify

package com.fbs.app

import android.util.Log
import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class ContactList : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ContactList {
        __init(_i, _bb)
        return this
    }
    fun list(j: Int) : Contact? = list(Contact(), j)
    fun list(obj: Contact, j: Int) : Contact? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val listLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_1_12_0()
        fun getRootAsContactList(_bb: ByteBuffer): ContactList = getRootAsContactList(_bb, ContactList())
        fun getRootAsContactList(_bb: ByteBuffer, obj: ContactList): ContactList {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
//            Log.i("INDEX", "bbi = ${_bb.getInt(_bb.position())}, bb = ${_bb.position()}")
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createContactList(builder: FlatBufferBuilder, listOffset: Int) : Int {
            builder.startTable(1)
            addList(builder, listOffset)
            return endContactList(builder)
        }
        fun startContactList(builder: FlatBufferBuilder) = builder.startTable(1)
        fun addList(builder: FlatBufferBuilder, list: Int) = builder.addOffset(0, list, 0)
        fun createListVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startListVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endContactList(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishContactListBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset)
        fun finishSizePrefixedContactListBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset)
    }
}
