// automatically generated by the FlatBuffers compiler, do not modify

package com.fbs.app

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class Contact : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Contact {
        __init(_i, _bb)
        return this
    }
    val id : Long
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    val member : String?
        get() {
            val o = __offset(6)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val memberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun memberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    val number : String?
        get() {
            val o = __offset(8)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val numberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun numberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    val name : String?
        get() {
            val o = __offset(10)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    val occupation : String?
        get() {
            val o = __offset(12)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val occupationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun occupationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    val company : String?
        get() {
            val o = __offset(14)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val companyAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun companyInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    val province : String?
        get() {
            val o = __offset(16)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val provinceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun provinceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    val city : String?
        get() {
            val o = __offset(18)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val cityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun cityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_1_12_0()
        fun getRootAsContact(_bb: ByteBuffer): Contact = getRootAsContact(_bb, Contact())
        fun getRootAsContact(_bb: ByteBuffer, obj: Contact): Contact {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createContact(builder: FlatBufferBuilder, id: Long, memberOffset: Int, numberOffset: Int, nameOffset: Int, occupationOffset: Int, companyOffset: Int, provinceOffset: Int, cityOffset: Int) : Int {
            builder.startTable(8)
            addId(builder, id)
            addCity(builder, cityOffset)
            addProvince(builder, provinceOffset)
            addCompany(builder, companyOffset)
            addOccupation(builder, occupationOffset)
            addName(builder, nameOffset)
            addNumber(builder, numberOffset)
            addMember(builder, memberOffset)
            return endContact(builder)
        }
        fun startContact(builder: FlatBufferBuilder) = builder.startTable(8)
        fun addId(builder: FlatBufferBuilder, id: Long) = builder.addLong(0, id, 0L)
        fun addMember(builder: FlatBufferBuilder, member: Int) = builder.addOffset(1, member, 0)
        fun addNumber(builder: FlatBufferBuilder, number: Int) = builder.addOffset(2, number, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(3, name, 0)
        fun addOccupation(builder: FlatBufferBuilder, occupation: Int) = builder.addOffset(4, occupation, 0)
        fun addCompany(builder: FlatBufferBuilder, company: Int) = builder.addOffset(5, company, 0)
        fun addProvince(builder: FlatBufferBuilder, province: Int) = builder.addOffset(6, province, 0)
        fun addCity(builder: FlatBufferBuilder, city: Int) = builder.addOffset(7, city, 0)
        fun endContact(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
